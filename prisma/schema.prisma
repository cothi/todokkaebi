// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String          @id @default(uuid())
  email         String?         @unique
  nickname      String
  birthday      DateTime?
  password      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  OAuthProvider OAuthProvider[]
  Project       Project[]
  Tokens        Tokens[]
}

model Tokens {
  id String @id @default(uuid())
  user  Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  accessToken String @unique
  refreshToken String @unique
  isRevoked Boolean @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([isRevoked, expiresAt])
}

model OAuthProvider {
  id         String       @id @default(uuid())
  provider   ProviderType
  providerId String
  user       Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@unique([provider, providerId])
  @@index([userId, provider])
}

enum ProviderType {
  KAKAO
  GOOGLE
  APPLE
}

model Project {
  id         String     @id @default(uuid())
  name       String
  user       Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id              String    @id @default(uuid())
  title           String
  startDate       DateTime
  endDate         DateTime
  actualStartDate DateTime?
  status          TaskState @default(PENDING)
  actualEndDate   DateTime?
  check           Boolean   @default(false)
  Category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([categoryId])
  @@index([startDate])
  @@index([endDate])
}

enum TaskState {
  PENDING
  IN_PROGRESS
  COMPLETE
}
